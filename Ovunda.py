import base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9weXRob24KIyBjb2Rpbmc9dXRmLTgKIyBPcmlnaW5hbGx5IFdyaXR0ZW4gQnk6IE53b21idSBDaGluZWR1IERhdmlkIE92dW5kYQojIFNvdXJjZSA6IFB5dGhvbjIiCiMgRG9ub3QgUmVjb2RlIEl0LiAKCiNJbXBvcnQgbW9kdWxlCnRyeToKICAgIGltcG9ydCBvcyxzeXMsdGltZSxkYXRldGltZSxyYW5kb20saGFzaGxpYixyZSx0aHJlYWRpbmcsanNvbix1cmxsaWIsY29va2llbGliLGdldHBhc3MsbWVjaGFuaXplLHJlcXVlc3RzCiAgICBmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sCiAgICBmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgogICAgZnJvbSBtZWNoYW5pemUgaW1wb3J0IEJyb3dzZXIKZXhjZXB0IEltcG9ydEVycm9yOgogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgcmVxdWVzdHMnKQogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgbWVjaGFuaXplJykKICAgIG9zLnN5c3RlbSgncHl0aG9uMiBPdnVuZGEucHknKQoKI0Jyb3dzZXIgU2V0dGluZwpyZWxvYWQoc3lzKQpzeXMuc2V0ZGVmYXVsdGVuY29kaW5nKCd1dGY4JykKYnIgPSBtZWNoYW5pemUuQnJvd3NlcigpCmJyLnNldF9oYW5kbGVfcm9ib3RzKEZhbHNlKQpici5zZXRfaGFuZGxlX3JlZnJlc2gobWVjaGFuaXplLl9odHRwLkhUVFBSZWZyZXNoUHJvY2Vzc29yKCksbWF4X3RpbWU9MSkKYnIuYWRkaGVhZGVycyA9IFsoJ3VzZXItYWdlbnQnLCdEYWx2aWsvMS42LjAgKExpbnV4OyBVOyBBbmRyb2lkIDQuNC4yOyBOWDU1IEJ1aWxkL0tPVDU1MDYpIFtGQkFOL0ZCNEE7RkJBVi8xMDYuMC4wLjI2LjY4O0ZCQlYvNDU5MDQxNjA7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy9pdF9JVDtGQlJWLzQ1OTA0MTYwO0ZCQ1IvUG9zdGVNb2JpbGU7RkJNRi9hc3VzO0ZCQkQvYXN1cztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9BU1VTX1owMEFEO0ZCU1YvNS4wO0ZCT1AvMTtGQkNBL3g4Njphcm1lYWJpLXY3YTtdJyldCgpkZWYgZXhpdCgpOgoJcHJpbnQgIlshXSBFeGl0IgoJb3Muc3lzLmV4aXQoKQoKCmRlZiBhY2FrKGIpOgogICAgdyA9ICdhaHRkempjJwogICAgZCA9ICcnCiAgICBmb3IgaSBpbiB4OgogICAgICAgIGQgKz0gJyEnK3dbcmFuZG9tLnJhbmRpbnQoMCxsZW4odyktMSldK2kKICAgIHJldHVybiBjZXRhayhkKQoKCmRlZiBjZXRhayhiKToKICAgIHcgPSAnYWh0ZHpqYycKICAgIGZvciBpIGluIHc6CiAgICAgICAgaiA9IHcuaW5kZXgoaSkKICAgICAgICB4PSB4LnJlcGxhY2UoJyElcyclaSwnXDAzM1slczsybSclc3RyKDMxK2opKQogICAgeCArPSAnXDAzM1swbScKICAgIHggPSB4LnJlcGxhY2UoJyEwJywnXDAzM1swbScpCiAgICBzeXMuc3Rkb3V0LndyaXRlKHgrJ1xuJykKCgpkZWYgY3liZXIoeik6Cglmb3IgZSBpbiB6ICsgJ1xuJzoKCQlzeXMuc3Rkb3V0LndyaXRlKGUpCgkJc3lzLnN0ZG91dC5mbHVzaCgpCgkJdGltZS5zbGVlcCgwLjAzKQojIyMjIyBMT0dPICMjIyMjCmJhbm5lciA9IiIiClwwMzNbMTs5NG18JD1AICAgICAgKyAgICAgICAgICAgICAgICAgICDDlyoKXDAzM1sxOzkybXwkICBAICAgICsgKyAgIMKlICAgICAgIMKlIF9fXyAgw5cgKiAKXDAzM1sxOzkzbXwkICAgQCAgKyAgICsgICDCpSAgICAgwqUgICB8ICAgw5cgICogICAgClwwMzNbMTs5NW18JCAgIEAgKz09PT09KyAgIMKlICAgwqUgICAgfCAgIMOXICAqIApcMDMzWzE7OTRtfCQgIEAgKyAgICAgICArICAgwqUgwqUgICAgIHwgICDDlyAqClwwMzNbMTs5Nm18JD1AICsgICAgICAgICArICAgwqUgICAgIF98XyAgw5cqClwwMzNbMTs5N20gKE53b21idSBEYXZpZCBDaGluZWR1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXDAzM1sxOzk0bSBbTmlnZXJpYW4gSGFja2VyXSAgICAgICAgICAgICAgICAgICAgICAgICAgIAogXDAzM1sxOzk1bVtcMDMzWzE7OTFtIEZBQ0VCT09LIEFDQ09VTlQgSEFDS0VSIFwwMzNbMTs5NG1cMDMzWzE7OTVtIF1cbgogXDAzM1sxOzk2bVBST0dSQU1NRVIgXDAzM1sxOzkxbTogXDAzM1sxOzkzbU53b21idSBEYXZpZCBDaGluZWR1CiBcMDMzWzE7OTdtVmVyc2lvbiBcMDMzWzE7OTRtOiBcMDMzWzE7OTZtMi41CiIiIgpkYXZpZD0iIiIKXDAzM1sxOzkxbSAkXCAgICAgJFwgICBEQVZJRCAgICAjIC0tLS0tLS0tLSAgICAgClwwMzNbMTs5Mm0gJCBcICAgICQgXCAgICAjXCAgICAjICAqICAjIyAgKgpcMDMzWzE7OTNtICQgIFwgICAkICBcICAjICBcICAjICAgICogICAgKgpcMDMzWzE7OTRtICQgICBcICAkICAgXCMgICAgXCMgICAgClwwMzNbMTs5NW0gJCAgICBcICQgICAgX19fX19fICAvXCAgL1wgICAmICAgJgpcMDMzWzE7OTZtICQgICAgIFwkICAgIHwgICAgfCAvICBcLyAgXCAgJiAgICYKXDAzM1sxOzk3bSBOV09NQlUgICAgICB8ICAgIHwvICAgICAgICBcICYgICAmClwwMzNbMTs5MW0gICAgQ0hJTkVEVSAgfF9fX198ICAgICAgICAgICAgJiYmCiIiIgojIHRpdGlrICMKZGVmIHRpaygpOgoJdGl0aWsgPSBbIi4gICAiLCIuLiAgIiwiLi4uICJdCglmb3IgbyBpbiB0aXRpazoKCQlwcmludCgiXHJb4pyUXSBMb2dnaW5nIEluICIrbyksO3N5cy5zdGRvdXQuZmx1c2goKTt0aW1lLnNsZWVwKDEpCgpiYWNrID0gMAppZCA9IFtdCgpkZWYgdGxvZ2luKCk6Cglvcy5zeXN0ZW0oJ2NsZWFyJykKCXByaW50IGJhbm5lcgoJdXNlcm5hbWUgPSByYXdfaW5wdXQoIlsrXSBUT09MIFVTRVJOQU1FOiAiKQoJaWYgdXNlcm5hbWUgPT0iQ3liZXIiOgoJICAgIG9zLnN5c3RlbSgnY2xlYXInKQoJICAgIHByaW50IGJhbm5lcgoJICAgIHByaW50ICJb4pyTXSBUT09MIFVTRVJOQU1FOiAiK3VzZXJuYW1lKyAiIChjb3JyZWN0KSIKCWVsc2U6CgkgICAgcHJpbnQgIlshXSBJbnZhbGlkIFVzZXJuYW1lLiIKCSAgICB0aW1lLnNsZWVwKDEpCgkgICAgdGxvZ2luKCkKCSAgICAKCXBhc3N3ID0gcmF3X2lucHV0KCJbK10gVE9PTCBQQVNTV09SRDogIikKCWlmIHBhc3N3ID09IkRlbW9uIjoKCSAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKCSAgICBwcmludCBiYW5uZXIKCSAgICBwcmludCAiW+Kck10gVE9PTCBVU0VSTkFNRTogIiArdXNlcm5hbWUrICIgKGNvcnJlY3QpIgoJICAgIHByaW50ICJb4pyTXSBUT09MIFBBU1NXT1JEOiAiICtwYXNzdysgIiAgKGNvcnJlY3QpIgoJICAgIHRpbWUuc2xlZXAoMikKCWVsc2U6CgkgICAgcHJpbnQgIlshXSBJbnZhbGlkIFBhc3N3b3JkLiIKCSAgICB0aW1lLnNsZWVwKDEpCgkgICAgdGxvZ2luKCkKCXRyeToKCQl0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsJ3InKQoJCW9zLnN5c3RlbSgncHl0aG9uMiBOd29tYnUucHknKQoJZXhjZXB0IChLZXlFcnJvcixJT0Vycm9yKToKCQltZXRob2Rsb2dpbigpCgllbHNlOgoJCXByaW50ICJbIV0gSW52YWxpZCBQYXNzd29yZCIKCQl0aW1lLnNsZWVwKDEpCgkJdGxvZ2luKCkKCiMjIyMjIExvZ2luIE1ldGhvZCAjIyMjIwoKCmRlZiBtZXRob2Rsb2dpbigpOgoJb3Muc3lzdGVtKCdjbGVhcicpCglwcmludCBiYW5uZXIKCXByaW50ICJbMV0gRkIgY2xvbmUgbG9naW4gV2l0aCBJRCAmIFBhc3N3b3JkLiIKCXByaW50ICJbMl0gRkIgY2xvbmUgbG9naW4gVXNpbmcgVG9rZW4uIgogICAgICAgIHByaW50ICJbM10gQ2xvbmluZyBXaXRob3V0IExvZ2luLiIKICAgICAgICBwcmludCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgcHJpbnQgIlVQREFURVMgQ09NSU5HIFNPT04uLi5TVEFZIFRVTkVELiIKICAgICAgICBwcmludCAiICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgIHByaW50ICJb4pyTXSBGYWNlYm9vayBCcnV0ZWZvcmNlLiIKICAgICAgICBwcmludCAiW+Kck10gRmFjZWJvb2sgUGhpc2hpbmcgdG9vbGtpdC4iCiAgICAgICAgcHJpbnQgIlvinJNdIEJ5cGFzcyBGQiAyZmEuIgogICAgICAgIHByaW50ICJbN10gQ2xvbmUgd2l0aCBmcmVlIG11bHRpcGxlIHRva2Vucy4iCiAgICAgICAgcHJpbnQgIlvinJNdIEZhY2Vib29rIGF1dG8gUmVwb3J0LiIKICAgICAgICBwcmludCAiW+Kck10gQ3JlYXRlIGluc3RhbnQgRkIgYWNjb3VudCB3aXRoIGZha2UgbnVtYmVyIGFuZCBlbWFpbC4iCiAgICAgICAgcHJpbnQgIlvinJNdIEZhY2Vib29rIFNlc3Npb24gaGphY2suIgoJcHJpbnQgIlswXSBFeGl0LiIKCXByaW50ICgnICAgICAgJykKCWhvcyA9IHJhd19pbnB1dCgiXG5DaG9vc2UgT3B0aW9uID4+ICAiKQoJaWYgaG9zID09IiI6CgkJcHJpbnQiWyFdICBXcm9uZyBJbnB1dCIKCQlleGl0KCkKCWVsaWYgaG9zID09IjEiOgoJCWxvZ2luKCkKCWVsaWYgaG9zID09IjIiOgoJCW9zLnN5c3RlbSgnY2xlYXInKQoJCXByaW50IGJhbm5lcgoJCWhvc3AgPSByYXdfaW5wdXQoIlsrXSBHaXZlIFRva2VuIDogIikKCQl0aWsoKQoJCWhvcGEgPSBvcGVuKCdsb2dpbi50eHQnLCd3JykKCQlob3BhLndyaXRlKGhvc3ApCgkJaG9wYS5jbG9zZSgpCgkJcHJpbnQgIlxuW+Kck10gTG9nZ2VkIEluIFN1Y2Nlc3NmdWxseS4iCgkJdGltZS5zbGVlcCgxKQoJCW9zLnN5c3RlbSgncHl0aG9uMiBOd29tYnUucHknKQoJCgllbGlmIGhvcyA9PSIzIjoKCQlvcy5zeXN0ZW0oJ2NsZWFyJykKCQlwcmludCBiYW5uZXIKICAgICAgICAgICAgICAgIHByaW50IGRhdmlkCgkJY3liZXIoJ1vinJNdIFBsZWFzZSBXYWl0IFdoaWxlIFRvb2wgSXMgTG9hZGluZycpCgkJY3liZXIoJz09TXk9bmFtZT0+Pj4+Pi0xMCUuLi4nKQoJICAgICAgICBjeWJlcignPT09PT1Jcz0+Pj4+Pj4tMjAlLi4uJykKICAgICAgICAgICAgICAgIGN5YmVyKCc9PURhdmlkPT0+Pj4+Pj4tMzAlLi4uJykKICAgICAgICAgICAgICAgIGN5YmVyKCc9PT1JPWFtPWE9Pj4+Pj4+LTQwJS4uLicpCgkgICAgICAgIGN5YmVyKCc9PU5pZ2VyaWFuPT09Pj4+Pj4+LTUwJS4uLicpCiAgICAgICAgICAgICAgICBjeWJlcignPT1IYWNrZXI9PT09PT09PT4+Pj4+Pi08PDw8PDw8PDw2MCUuLi4nKQogICAgICAgICAgICAgICAgY3liZXIoJz09ST1saXZlPWluPVJpdmVycz1TdGF0ZT09PDw8PDw8PDwtNzAlLi4uJykKCSAgICAgICAgY3liZXIoJz09ST1Mb3ZlPUhhY2tpbmc9QW5kPT08PDw8PDw8PDw8PDw8PDw8LTgwJS4uLicpCiAgICAgICAgICAgICAgICBjeWJlcignPT1Qcm9ncmFtbWluZz09PT09PT09PT08PDw8PDw8PDw8PDw8PDw8PDw8PC05MCUuLi4nKQogICAgICAgICAgICAgICAgY3liZXIoJz1NeT1EcmVhbT1pcz10bz13b3JrPWZvcj10aGU9RUZDQz08PDw8PDw8PDw8PDw8PDw8PC0xMDAlLi4uJykKICAgICAgICAgICAgICAgIGN5YmVyKCdJIGFtIGFuIEVsZWN0cmljYWwgRW5naW5lZXJpbmcgU3R1ZGVudCBjdXJyZW50bHkgc3R1ZHlpbmcgaW4gUml2ZXIgU3RhdGUgVW5pdmVyc2l0eScpCgkJdGltZS5zbGVlcCg1KQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCgkJb3Muc3lzdGVtKCJweXRob24yIERhdmlkLnB5IikKCQkKCWVsaWYgaG9zID09IjAiOgoJCWV4aXQoKQoJZWxzZToKCQlwcmludCJbw5ddIFdyb25nIElucHV0IgoJCWV4aXQoKQpkZWYgbG9naW4oKToKCW9zLnN5c3RlbSgiY2xlYXIiKQoJdHJ5OgoJCXRiPW9wZW4oJ2xvZ2luLnR4dCcsICdyJykKCQlvcy5zeXN0ZW0oInB5dGhvbjIgTndvbWJ1LnB5IikKCWV4Y2VwdCAoS2V5RXJyb3IsSU9FcnJvcik6CgkJb3Muc3lzdGVtKCJjbGVhciIpCgkJcHJpbnQgKGJhbm5lcikKCQljeWJlcignWyFdIEN5YmVyIERlbW9uIGdyb3VwJykKCQljeWJlcignWyFdIFVzZSBhIE5ldyBGYWNlYm9vayBBY2NvdW50IFRvIExvZ2luJykKCQlwcmludCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJwoJCWlpZD1yYXdfaW5wdXQoJ1srXSBQaG9uZW51bWJlci9FbWFpbDogJykKCQlpZD1paWQucmVwbGFjZSgiICIsIiIpCgkJcHdkPXJhd19pbnB1dCgnWytdIFBhc3N3b3JkIDogJykKCQl0aWsoKQoJCWRhdGEgPSBici5vcGVuKCJodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTEmZW1haWw9IisoaWQpKyImbG9jYWxlPWVuX1VTJnBhc3N3b3JkPSIrKHB3ZCkrIiZzZGs9aW9zJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJnNpZz0zZjU1NWY5OWZiNjFmY2Q3YWEwYzQ0ZjU4ZjUyMmVmNiIpCgkJej1qc29uLmxvYWQoZGF0YSkKCQlpZiAnYWNjZXNzX3Rva2VuJyBpbiB6OgoJCSAgICBzdCA9IG9wZW4oImxvZ2luLnR4dCIsICJ3IikKCQkgICAgc3Qud3JpdGUoelsiYWNjZXNzX3Rva2VuIl0pCgkJICAgIHN0LmNsb3NlKCkKCQkgICAgcHJpbnQgIlxuW+Kck10gTG9nZ2VkIEluIFN1Y2Nlc3NmdWxseS4iCgkJICAgIHRpbWUuc2xlZXAoMSkKCQkgICAgb3Muc3lzdGVtKCJjbGVhciIpCgkJICAgIG9zLnN5c3RlbSgicHl0aG9uMiBOd29tYnUucHkiKQoJCWVsc2U6CgkJICAgIGlmICJ3d3cuZmFjZWJvb2suY29tIiBpbiB6WyJlcnJvcl9tc2ciXToKCQkgICAgICAgIHByaW50ICgnWyFdIFVzZXIgTXVzdCBWZXJpZnkgQWNjb3VudCBCZWZvcmUgTG9naW4uJykKCQkgICAgICAgIHRpbWUuc2xlZXAoMykKCQkgICAgICAgIGxvZ2luKCkKCQkgICAgZWxzZToKCQkgICAgICAgIHByaW50ICgnWyFdTnVtYmVyL1VzZXIgSWQvIFBhc3N3b3JkIElzIFdyb25nICEnKQoJCSAgICAgICAgdGltZS5zbGVlcCgxKQoJCSAgICAgICAgbG9naW4oKQppZiBfX25hbWVfXz09J19fbWFpbl9fJzoKICAgIHRsb2dpbigpCg=="))